@startuml
'https://plantuml.com/class-diagram


class Project{
- events : List<Event>
+ Project(id, name: String, father: Event, tags: List<String> )
# invariant(): boolean
+ getEvents(): List<Event>
# //calculateDuration() : void//
# //addEvent(e : Event) : void//
+ //acceptVisitor(visitor : Visitor) : void//
+ findActivityById(id : int) : Event
+ toJson(depth : int) : JSONObject
}

class Task{
- task_intervals : ArrayList<Interval>
+ Task(id, name: String, father: Event, tags : List<String>)
# invariant(): boolean
+ getTaskIntervals() : ArrayList<interval>
# //startTask() : void//
# //addEvent(event : Event) : void//
# //calculateDuration() : void//
# //stopTask() : void//
+ //acceptVisitor(visitor : Visitor) : void//
+ findActivityById(id : int) : Event
+ toJson(depth : int) : JSONObject
}

abstract Event{
# {static} delay : int = 2{readOnly}
# name : String
- father : Event
# initTime : LocalDateTime
# endTime : LocalDateTime
# event_duration : Duration
# tags : list<String>
# id : int
# json : JSONObject
# logger : Logger
+ Event(identifier, n : String, f: Event, l : List<String>)
+ getName() : String
+ getTags() : List<String>
+ getInitTime() : LocalDateTime
+ getEndTime() : LocalDateTime
+ getFather() : Event
+ getDuration() : Duration
+ getJson() : JSONObject
+ getId() : int
+ //setInitTime(dateTime: LocalDateTime) : void//
+ //setEndTime(dateTime: LocalDateTime) : void//
+ //setDuration(childrenDuration: Duration) : void//
# //addEvent(event : Event) : void//
+ //calculateDuration() : void//
+ //acceptVisitor(visitor : Visitor) : void//
# invariant : boolean
# humanReadableFormat(duration: Duration) : String
+ //findActivityById(id : int) : Event//
+ //toJson(depth : int) : JSONObject//
}

class Clock{
- {static} dateTime : LocalDateTime
- {static} timer : Timer
- {static} instance : Clock
- logger : Logger
+ {static} getInstance() : Clock
- Clock
# //stop() : void//
- //tick() : void//
+ //notifyObservers(arg : Object) : void//
}

class Interval{
- initTime : LocalDateTime
- endTime : DateTime
- duration : Duration /'cada golpe de reloj incremento'/
- task : Task
- logger : Logger
- jsonInterval : JSONObject
+ Interval(t : Task)
+ getInitTime() : LocalDateTime
+ getEndTime() : LocalDateTime
+ getDuration() : Duration
+ getTask() : Task
+ getJsonInterval() : JSONObject
# //endInterval() : void//
+ //acceptVisitor(visitor : Visitor) : void//
}

interface Visitor{
+ //visitTask(t : Task) : void//
+ //visitProject(p : Project) : void//
+ //visitInterval(i : Interval) : void//
}

class Print{
- root : Event
- {static}instance : Print
- logger : Logger
+ Print(rootF: Event)
+ {static}getInstance(rootF: Event) : Print
+ //printerInterval() : void//
- DateFormatter(dt: LocalDateTime) : String
+ //visitTask(t : Task) : void//
+ //visitInterval(i : Interval) : void//
+ //visitProject(p : Project) : void//
}

package "java.utils"{
interface Observer{
+ update(arg0 : Observable, arg1 : Object)
}

abstract Observable{
+ addObserver(ob : Observer)
+ deleteObserver(ob : Observer)
+ setChanged()
+ notifyObservers(arg0 : Observable, arg1: Object}
}
}


class Client{
//main() : void//
}


class Search{
- root : Event
- {static} instance : Search
- found : String
- logger : Logger
+ Search(rootF : Event, required : String)
+ {static} getInstance(rootF : Event, required: String) : Search
+ //visitProject(p : Project) : void//
+ //visitTask(t : Task) : void//
+ //visitInterval(i : Interval) : void//
}

class Json{
- root : Event
+ //storeInfo(e : Event, file : String) : void//
+ //loadInfo(file : String) : void//
+ //generateTree() : void//
}


class JsonVisitor{
- father : JSONObject
- childs : JSONArray
- intervals : JSONArray
+ JsonVisitor()
+ getFather() : JSONObject
+ getChildren() : JSONArray
+ //visitInterval(i : Interval) : void//
+ //visitTask(t : Task) : void//
+ //visitProject(p : Project) : void//
}

package "webserver"{
class WebServer{
- {static} PORT : int = 8080{readOnly}
- currentEvent : Event
- root : Event{readOnly}
+ WebServer(root : Event)
- findActivityByID(id : int) : Event




- class SocketThread{
- insocked : Socket{readOnly}
+ //run() : void//
- makeBodyAnswer(tokens : String[]) : String
- makeHeaderAnswer : String
}



class MainWebServer{
+ //{static} main(args : String[]) : void//
+ //{static} webServer() : void//
+ {static} makeTreeCourses() : Event
}

}

Event <|-- Task
Event <|-- Project
Event "1" <--* "0..*" Project
Observable <|-- Clock
Observer <|-- Interval
Observer "1" <--o "0..*" Observable
Interval "0..*" --*  "1" Task
Event <-- Client
Visitor <-- Client
Print --|> Visitor
Search --|> Visitor
JsonVisitor --|> Visitor
WebServer --> MainWebServer

@enduml