@startuml
'https://plantuml.com/class-diagram


class Project{
- events : List<Event>
+ Project(name: String, father: Event)
+ getEvents(): List<Event>
# calculateDuration()
# addEvent(e : Event)
+ acceptVisitor(visitor : Visitor)
}

class Task{
- task_intervals : ArrayList<Interval>
+ Task(name: String, father: Event)
+ getTask_intervals() : ArrayList<interval>
# addEvent(event : Event)
# startTask()
# calculateDuration()
# stopTask()
+ acceptVisitor(visitor : Visitor)
}

abstract Event{
# name : String
# initTime : LocalDateTime
# endTime : LocalDateTime
# event_duration : Duration
- father : Event
+ Event(n : String, f: Event)
+ setName(n : String)
+ setInitTime(dateTime: LocalDateTime)
+ setEndTime(dateTime: LocalDateTime)
+ setDuration(childrenDuration: Duration)
+ getName() : String
+ getInitTime() : LocalDateTime
+ getEndTime() : LocalDateTime
+ getFather() : Event
+ getDuration() : Duration
# //addEvent(event : Event)//
+ //calculateDuration()//
+ //acceptVisitor(visitor : Visitor)//
# //humanReadableFormat(duration: Duration) : String//
}

class Clock{
- timer : Timer
- dateTime : LocalDateTime
- instance : Clock
- Clock()
+ //getInstance() : Clock//
+ getDateTime() : LocalDateTime
# stop()
- //tick()//
+ //notifyObservers()//
}

class Interval{
- initTime : LocalDateTime
- endTime : DateTime
- duration : Duration /'cada golpe de reloj incremento'/
- task : Task
+ Interval(t : Task)
+ update(o: Observable, arg: Object)
+ getTask() : Task
+ getInitTime() : LocalDateTime
+ getEndTime() : LocalDateTime
+ getDuration() : Duration
# endInterval()
+ acceptVisitor(visitor : Visitor)
}

interface Visitor{
+ visitTask(t : Task)
+ visitProject(p : Project)
+ visitInterval(i : Interval)
}

class Print{
- root : Event
- //instance : Print//
+ Print(rootF: Event)
+ //getInstance(rootF: Event) : Print//
+ printerInterval()
- DateFormatter(dt: LocalDateTime) : String
+ visitTask(t : Task)
+ visitInterval(i : Interval)
+ visitProject(p : Project)
}

package "java.utils"{
interface Observer{
+ update(arg0 : Observable, arg1 : Object)
}

abstract Observable{
+ addObserver(ob : Observer)
+ deleteObserver(ob : Observer)
+ setChanged()
+ notifyObservers(arg0 : Observable, arg1: Object}
}
}

class Client{
//void main()//
}

Event <|-- Task
Event <|-- Project
Event "1" <--* "0..*" Project
Observable <|-- Clock
Observer <|-- Interval
Observer "1" <--o "0..*" Observable
Interval "0..*" --*  "1" Task
Event <-- Client
Visitor <-- Client
Print --|> Visitor



@enduml